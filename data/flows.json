[
    {
        "id": "4f19d12f.1e2c4",
        "type": "tab",
        "label": "Rx",
        "disabled": false,
        "info": ""
    },
    {
        "id": "22062ea4.eb1692",
        "type": "tab",
        "label": "Db",
        "disabled": false,
        "info": "This flow takes all of the incomming messages from the receiver and uses them to update an in-memory database of every aircraft seen. \n\nWhen an aircraft record changes, it is sent to the out-link for consumption by other flows.\n\nEvery n-seconds every active aircraft record is checked and if no messages have been received for m-seconds, the record is set to in-active."
    },
    {
        "id": "b89551a1.981bf",
        "type": "tab",
        "label": "Map",
        "disabled": false,
        "info": ""
    },
    {
        "id": "933825f3.5e6058",
        "type": "ui_tab",
        "name": "Local Flight Track",
        "icon": "airport",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "96e62eeb.e7c3d",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#3f4aa2",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#3f4aa2",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#6973c5",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#3f4aa2",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Local Flight Track",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "none",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "f18730a5.cb179",
        "type": "tcp in",
        "z": "4f19d12f.1e2c4",
        "name": "",
        "server": "client",
        "host": "recv",
        "port": "30003",
        "datamode": "stream",
        "datatype": "utf8",
        "newline": "\\n",
        "topic": "",
        "base64": false,
        "x": 120,
        "y": 60,
        "wires": [
            [
                "bd3e632b.fd2f3"
            ]
        ]
    },
    {
        "id": "bd3e632b.fd2f3",
        "type": "npm",
        "z": "4f19d12f.1e2c4",
        "name": "sbs1 decoder",
        "func": "// NPM module exposed as variable, npm_module\nreturn npm_module(msg.payload);",
        "npm_module": "sbs1-compat",
        "module_style": "function",
        "msg_payload": "return_val",
        "function_name": "parseSbs1Message",
        "x": 340,
        "y": 60,
        "wires": [
            [
                "99cfcf6c.0ccf5"
            ]
        ],
        "outputLabels": [
            "decoded ads-b messages"
        ]
    },
    {
        "id": "7de6f7c3.2417a8",
        "type": "link out",
        "z": "4f19d12f.1e2c4",
        "name": "adsb-messages",
        "links": [
            "fb63c521.8f3888",
            "68a1bd7.fb66344"
        ],
        "x": 735,
        "y": 80,
        "wires": []
    },
    {
        "id": "e38f79f9.9bcf28",
        "type": "link out",
        "z": "22062ea4.eb1692",
        "name": "db out",
        "links": [
            "17438f18.aa3ae1"
        ],
        "x": 775,
        "y": 60,
        "wires": []
    },
    {
        "id": "15dd7292.72f38d",
        "type": "function",
        "z": "22062ea4.eb1692",
        "name": "save",
        "func": "flow.set(msg.payload.icao, msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 120,
        "wires": [
            [
                "e008cb44.7bc208"
            ]
        ]
    },
    {
        "id": "99cfcf6c.0ccf5",
        "type": "switch",
        "z": "4f19d12f.1e2c4",
        "name": "msg_type router",
        "property": "payload.message_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SEL",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ID",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "AIR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "STA",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CLK",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 6,
        "x": 360,
        "y": 260,
        "wires": [
            [],
            [],
            [],
            [],
            [],
            [
                "68027129.5197d"
            ]
        ],
        "outputLabels": [
            "SELECTION CHANGE MESSAGE",
            " NEW ID MESSAGE",
            " NEW AIRCRAFT MESSAGE",
            "STATUS CHANGE MESSAGE",
            " CLICK MESSAGE",
            " TRANSMISSION MESSAGE"
        ]
    },
    {
        "id": "7e08fee.33e6",
        "type": "function",
        "z": "22062ea4.eb1692",
        "name": "merge",
        "func": "msg.payload = Object.entries(msg.payload)\n.filter(kvp => kvp[1])\n.map(kvp => ({[kvp[0]]: kvp[1]}))\n.reduce((acc, cur) => Object.assign(acc, cur), flow.get(msg.payload.icao) || {})\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 140,
        "wires": [
            [
                "15dd7292.72f38d"
            ]
        ]
    },
    {
        "id": "17438f18.aa3ae1",
        "type": "link in",
        "z": "b89551a1.981bf",
        "name": "aircraft reader",
        "links": [
            "e38f79f9.9bcf28"
        ],
        "x": 175,
        "y": 140,
        "wires": [
            [
                "62d5daa4.3f6074"
            ]
        ]
    },
    {
        "id": "62d5daa4.3f6074",
        "type": "change",
        "z": "b89551a1.981bf",
        "name": "update marker",
        "rules": [
            {
                "t": "set",
                "p": "payload.name",
                "pt": "msg",
                "to": "payload.icao",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.tooltip",
                "pt": "msg",
                "to": "msg.payload.flight_id ? msg.payload.flight_id : msg.payload.hex_ident",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.iconColor",
                "pt": "msg",
                "to": "msg.payload.vertical_rate  < -100 ? \"red\" : msg.payload.vertical_rate > 100 ? \"green\" : \"black\"",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload.icon",
                "pt": "msg",
                "to": "plane",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.layer",
                "pt": "msg",
                "to": "aircraft",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload.ttl",
                "pt": "msg",
                "to": "20",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 100,
        "wires": [
            [
                "c14121ea.ce79c"
            ]
        ]
    },
    {
        "id": "bb99adf8.f1314",
        "type": "worldmap",
        "z": "b89551a1.981bf",
        "name": "",
        "lat": "35.1983",
        "lon": "-111.6513",
        "zoom": "",
        "layer": "OSM",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "show",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "false",
        "coords": "none",
        "showgrid": "false",
        "allowFileDrop": "false",
        "path": "/flightmap",
        "x": 740,
        "y": 160,
        "wires": []
    },
    {
        "id": "68a1bd7.fb66344",
        "type": "link in",
        "z": "22062ea4.eb1692",
        "name": "db in",
        "links": [
            "7de6f7c3.2417a8"
        ],
        "x": 155,
        "y": 60,
        "wires": [
            [
                "7e08fee.33e6"
            ]
        ]
    },
    {
        "id": "68027129.5197d",
        "type": "function",
        "z": "4f19d12f.1e2c4",
        "name": "sbs1 -> aircraft rec",
        "func": "\nconst fns = [\n    props => ({icao: props.hex_ident}),\n    props => ({call_sign: props.flight_id ? props.flight_id.trim() : null}),\n    props => ({timestamp: Date.parse(props.logged_date + \" \" + props.logged_time)}),\n    props => ({altitude: props.altitude}),\n    props => ({speed: props.ground_speed}),\n    props => ({heading: props.track}),\n    props => ({lat: props.lat}),\n    props => ({lon: props.lon}),\n    props => ({vertical_rate: props.vertical_rate})\n];\n\nmsg.payload = fns.map(f => f.call(this, msg.payload))\n.reduce((a, c) => Object.assign(a,c), {});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 380,
        "wires": [
            [
                "6f6dc359.91c2ac"
            ]
        ]
    },
    {
        "id": "4343c9ea.1b1fb8",
        "type": "inject",
        "z": "22062ea4.eb1692",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 260,
        "wires": [
            [
                "5d7f911d.880ca"
            ]
        ]
    },
    {
        "id": "5d7f911d.880ca",
        "type": "function",
        "z": "22062ea4.eb1692",
        "name": "clear the aircraft database",
        "func": "flow.keys().forEach(k => flow.set(k, undefined))\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "e008cb44.7bc208",
        "type": "function",
        "z": "22062ea4.eb1692",
        "name": "clone payload",
        "func": "msg.payload = Object.assign({}, msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 140,
        "wires": [
            [
                "e38f79f9.9bcf28"
            ]
        ]
    },
    {
        "id": "c14121ea.ce79c",
        "type": "switch",
        "z": "b89551a1.981bf",
        "name": "has call_sign?",
        "property": "payload.call_sign",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 500,
        "y": 180,
        "wires": [
            [
                "201ef426.cba53c"
            ],
            [
                "bb99adf8.f1314"
            ]
        ],
        "outputLabels": [
            "yes",
            "no"
        ]
    },
    {
        "id": "201ef426.cba53c",
        "type": "change",
        "z": "b89551a1.981bf",
        "name": "set call sign label",
        "rules": [
            {
                "t": "set",
                "p": "payload.label",
                "pt": "msg",
                "to": "payload.call_sign",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 80,
        "wires": [
            [
                "bb99adf8.f1314"
            ]
        ]
    },
    {
        "id": "6f6dc359.91c2ac",
        "type": "function",
        "z": "4f19d12f.1e2c4",
        "name": "filter out icao: \"000000\"",
        "func": "if(msg.payload.icao === \"000000\"){\n    node.done();\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 280,
        "wires": [
            [
                "7de6f7c3.2417a8"
            ]
        ]
    }
]